<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_bundle_create().
 *
 * Could be in event after https://www.drupal.org/project/drupal/issues/2553169.
 */
function group_members_extra_entity_bundle_create($entity_type_id, $bundle) {
  // Only create config objects while config import is not in progress.
  if ($entity_type_id !== 'group_content' || \Drupal::isConfigSyncing()) {
    return;
  }

  // Load the entity type.
  $entity_type = \Drupal::entityTypeManager()
    ->getStorage('group_content_type')
    ->load($bundle);

  if (!$entity_type || $entity_type->getContentPluginId() !== 'group_membership') {
    return;
  }

  // Add the group_contact field to the newly added group content type. The
  // field storage for this is defined in the config/install folder.
  FieldConfig::create([
    'field_storage' => FieldStorageConfig::loadByName('group_content', 'group_contact'),
    'bundle' => $bundle,
    'label' => t('Group contact'),
    'description' => t('Members marked as group contact will be shown in the Contacts block on the Group page.'),
    'on_label' => t('Yes'),
    'off_label' => t('No'),
  ])->save();


  // Build or retrieve the 'default' form mode.
  if (!$form_display = EntityFormDisplay::load("group_content.$bundle.default")) {
    $form_display = EntityFormDisplay::create([
      'targetEntityType' => 'group_content',
      'bundle' => $bundle,
      'mode' => 'default',
      'status' => TRUE,
    ]);
  }

  // Assign widget settings for the 'default' form mode.
  $form_display->setComponent('group_contact', [
    'type' => 'boolean_checkbox',
  ])->save();

}

/**
 * Implements hook_entity_field_access().
 */
function group_members_extra_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  // Can't retrieve an entity from an empty item list.
  if (!isset($items)) {
    return AccessResult::neutral();
  }

  // We only care about the group_contact field when on a form.
  if ($operation !== 'edit' || $field_definition->getName() !== 'group_contact') {
    return AccessResult::neutral();
  }

  // We only care if it is attached to a group content entity.
  if ($items->getEntity()->getEntityTypeId() !== 'group_content') {
    return AccessResult::neutral();
  }

  /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
  $group_content = $items->getEntity();

  // We only care if the group content entity is a group membership.
  if ($group_content->getContentPlugin()->getPluginId() !== 'group_membership') {
    return AccessResult::neutral();
  }

  // Now that we know we're dealing with a group_contact field on a group
  // membership form, we need to check whether the group membership belongs to
  // a group yet. If not, we can't check for access and should always hide it.
  if (!$group = $group_content->getGroup()) {
    return AccessResult::forbidden();
  }

  // Only group administrators should be able to change the group contact field.
  return AccessResult::forbiddenIf(!$group->hasPermission('administer members', $account));
}

/**
 * Implements hook_views_post_execute().
 *
 * Add substitution for the group_type_label to be used in Views.
 */
function group_members_extra_views_post_execute(ViewExecutable $view) {
  /** @var \Drupal\views\ViewExecutable $view */
  $args = $view->argument;
  if (isset($args['gid'])) {
    $gid = $args['gid']->getValue();
    $group = Drupal::entityTypeManager()->getStorage('group')->load($gid);

    /** @var \Drupal\group\Entity\Group $group */
    if ($group) {
      $view->build_info['substitutions']['{{ group_type_label }}'] = $group->getGroupType()->label();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add substitution in the help description in Views UI argument form.
 */
function group_members_extra_form_views_ui_config_item_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $storage = $form_state->getStorage();
  if ($storage['type'] === 'argument' && $storage['id'] === 'gid') {
    $form['options']['token_help']['#value'][1]['#items'][] = "{{ group_type_label }} == " . t('Group type: label');
  }
}
